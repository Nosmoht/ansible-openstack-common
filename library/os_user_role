#!/usr/bin/python2 -tt
# -*- coding: utf-8 -*-

import os

OPENSTACK_KEYSTONE_BIN = '/usr/bin/keystone'

# Output of 'keystone user-role-list' is something like
# +----------------------------------+-------+----------------------------------+----------------------------------+
# |                id                |  name |             user_id              |            tenant_id             |
# +----------------------------------+-------+----------------------------------+----------------------------------+
# | cdfccf571945457bb2ec3421c0d00218 | admin | f0959a16637444009262aad8c300709c | 4e43ac0534ad4383b86a5e7c02aab7c7 |
# +----------------------------------+-------+----------------------------------+----------------------------------+
def user_role_list(module, command, user, tenant):
	rc, out, err = module.run_command('%s user-list --tenant %s --user %s' % (command, tenant, user))
	if rc != 0:
		module.fail_json(msg="Error while checking existing user roles.", rc=rc, err=err)
	user_roles = dict()
	for row in out.split('\n'):
		if '|' in row:
			items = [ item.strip() for item in row.split('|') ]
			for item in items:
				if not item:
					items.remove('')
			users.update({items[1]: {'id': items[0], 'user_id': items[2], 'tenant_id': items[3]}})
			
	return user_roles
		
def user_role_exit(name, user_roles):
	return user_roles.has_key(name)

def create_user_role(module, command, user, role, tenat):
	command = '%s user-role-add --user %s --role %s --tenant %s' % (command, user, role, tenant)
	rc, out, err = module.run_command(command)
	if rc != 0:
 		module.fail_json(msg="Error while creating user role", rc=rc, err=err)
	return True

def delete_user_role(module, command, user, role, tenant):
	command = '%s user-role-remove --user %s --role %s --tenant %s' % (command, user, role, tenant)
	rc, out, err = module.run_command(command)
	if rc != 0:
 		module.fail_json(msg="Error while removing user role", rc=rc, err=err)
	return True
	
def ensure_user_role(module):
	user = module.params['user']
	role = module.params['role']
	tenant = module.params['tenant']
	enabled = module.params['enabled']
	state = module.params['state']
	token = module.params['token']
	endpoint = module.params['endpoint']
	command = '%s --os-token %s --os-endpoint %s' % (OPENSTACK_KEYSTONE_BIN, token, endpoint)
	changed = False
	
	user_roles = user_role_list(module, command, user, tenant)
	if state == 'present' and not user_role_exit(user, user_roles):
		changed = create_user_role(module, command, user, role, tenant)
	elif state == 'absent' and user_role_exit(user, user_roles):
		changed = delete_user_role(module, command, user, role, tenant)
	return changed

def main():
	module = AnsibleModule(
	    argument_spec=dict(
			user=dict(required=True, Type='str'),
			role=dict(required=True, Type='str'),
			tenant=dict(required=True, Type='str'),
	        state=dict(default='present', choices=['present', 'absent']),
	        token=dict(Default=None, required=True),
	        endpoint=dict(Default=None, required=True),
	    ),
	)
	
	changed = ensure_user_role(module)
	module.exit_json(changed=changed, name='%s-%s-%s' % (user, role, tenant))

# import module snippets
from ansible.module_utils.basic import *
main()
